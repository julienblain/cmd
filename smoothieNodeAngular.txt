				NODEJS

nvm (utilitaire qui permet de bosse avec other version node)
node				//ouverture REPL cad console node
node -e console.log("test")	//evalue la commande en dehors de l'interpreteur
ctrl+c

npm init
npm init -y			//yes aux questions

//////////////////Exemple
on cree index.js
on colle ceci
const http = require('http');
const port = 3000
 ; http.createServer((req, res) => {
 res.writeHead(200, {'Content-Type': 'text/html'})
 res.end('Hello World\n')
}).listen(port); 

console.log(`Server running at http://localhost:${port}/`)

node index.js 			//lance le server
///////////////////Fin ex


				EXPRESS

npm install -g express-generator	//framework
express smoothie-be			//smoothie is my folder name
exress smoothie-be --pug		//library pug for templates (anicen jade)

npm install
npm start				//lance le server

controller du router in routes/index.js

https://express-validator.github.io/docs/ //permet de valider les formualires en be
				NODEMON
npm install nodemon			//evite de relancer tt les verif

ajouter dans app.js pour creer le raccourci
"scripts": {
    "start": "node ./bin/www",
    "dev": "nodemon ./bin/www"
  },

npm run dev				//lance server via nodemon


				MONGODB:MONGOUZ
ouvrir la console c:\ProgramFiles\MongoDB\SErver\4.0\bien\mongo.exe
use dbName			//va sur la db
db.createCollection("name");	
db.getCollection("name").insertMany([{dataJson}]);		//insert data
db.getCollection("nam").find();					//find data in collection
show dbs
db								//voir dans quelle base on est
db.collectionN.drop()
db.dropDatabase()
db.collectionN.find({tags: 'business'})


npm i mongodb mongoose --save					//install mongoose

				CONFIGUR APP.JS
create config/database.js a la racine
module.exportes = {}						//permet de rendre un objet accessible à tout le projet

npm i cors --save-dev 
update app.js
var catalogRouter = require('./api/catalog');
const configDb = require('./config/database');
const cors = require('cors');
var app = express();
// Header cross origin
var corsOptions = {
  origin: '*',
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// On importe la conf puis on connecte via la propriété database
mongoose.connect(configDb.database, {
  useNewUrlParser: true
});
mongoose.set('useFindAndModify', false);
let db = mongoose.connection;

// Controle de la connexion
db.once('open', () => {
  console.log('Connecté à MongoDB app');
});

// Controle des erreur DB
db.on('error', (err) => {
  console.log(err);
});

edx pour Introduction to NodeJS azat mardan
 
				ANGULAR
npm i -g @angular/cli
ng new nameProject
ng serve

module = fichier de recensement de toutes les librairy
services = fichiers qui chargent des data externes (genre avec le backend)

ng generate component name
ng generate module name

dans app.coàmponent on supprime et on met la balise router-outler
on cree app-routing.module.ts

cf git SmoothieApp
2 way binding
ng build --prod			//compile pour la prod et supprime les truc inutil

				MATERIAL (concurrent ng-lightning)
npm install --save @angular/material @angular/cdk @angular/animations


				SERVICE
ng generate service smoothie --flat		//flat pour creer le service à la racine
Le get du composant va faire appel au service qui va renvoyer un obersvable, le service se connecte à la bdd et renvoie au composant
On cree une interface avec les elements de nos data
url du backend on la cree dans le service ou dans le fichier environnements


				RXJS
permet de mieux gerer le flux de donné, on manipule avec ses fonctions de data observables
on souscrit à un observable, à un service (subscrize, unsubscript)

Promise.all(promesse1, promesse2) et il va toute les resoudre avant de return
concat()  		execute à la suite les observable
concatMap()		
map()			applique une fonction sur la valeur de l'obervable

ng-dynamic-componet librairy  qui permet d'inserer des données d'autres composant dans le template, simplifie la structure




