				JAVA

PLAN
base
application locale(sur une poste de travail)
Persistence : Hibernate
J2e : application web (serverlet, jsp)
Creation web service
Framework Spring


Encapsulaiton : objet contient ses proprités et ses méthodes, et les methodes ont comme param les propriété (simplification plutot qu'en procedural car les methodes sont direct dans l'objet cible)

Model de classe (classe abstraites) et modèle de comportement (interface = que des definitions de methodes)

genericité : fabriqué des classes paramétrés dont les param sont des types de donnée

Machine virtuelle : Hyper v et VMWare sont utilisés pour le cloud, VirtualMachine
JVM : contener qui permet l'isolation de l'appel des classes, exé qui sont isolés du systeme d'exploitation, apli...

C'est le bytecode qui s'execute dans la jvm, donc apres compilation. 
Appli Multi-thread : appli qui a plusieurs fil d'execution

INSTALL
mettre le path de java

Maven : gestionnaire de paquet

Prendre java main class la 1ere fois

Texte donnant des info au compilateur
@Deprecated
@Override
@SuppressWarnings

@Deprecated
    static void m1() {

				JAVADOC
/**
* @param args the command line arguments
*/
@return
@throws

alt+entrer import class

une methode static est une methode qu'on peut appeler de l'exterieur sans instancier l'objet.


				TYPE DE VARIABLE PRIMITIVE
int (sur 4 octets)
byte (octet)
char (caractere stocké sur 2 octets)
short
long (8 octets)
float (4octets) 10^-38 a 10^38 precision relative 8 apres la virgule
double de 10^-350 à 10^350	precision relative 12,13 apres la virgule

pas de variable static dans une méthode

Personne.nb 	apple d'une variable de classe
p1.nb		appel d'une variable d'instance


				CLASSE STRING
utiliser StringBuffer/StringBuilder(non syncro) pour modif la string (method append pour add)
Dès qu'on est avec des class le == n'est pas utilisable car les emplacements mémoires ne sont pas les meme
On utilise equals


ABSENT

Github des projets : https://github.com/webformation/Formation-Java/tree/master/src/main/java/com/formation/mediatheque

ArrayList	contains
Vector
Liste chainé
container avec clef de hachage
collection
System.ArrayCopy
les array pointent normalement vers des address, arrayCopy permet de creer un autre  emplacement


23 JUILLET 2019
				SYNTAXE DE BASE
OPERATEURS
L'associativité peut être de droite à gauche suivant les operateurs

une division de 2 int donnera un resultat int (donc 0), et meme si on affecte le resultat à un flottant

L'Incrementation
b=5
a=b++; 		// valeur de retour post fixé a =5 et b =6;
a = ++b;	// valeur de retour pré fixé a=6 b=6
DAns une boucle il vaut mieux ++i;


				Les Boucles
break permet de quitter la boucle en cours
continue permet d'arreter à un endroit mais passe à l'itération suivante

while (i++<MAX) 	//permet d'incrementer dans while
maBoucle: while...	//une etiquette permet de break une etiquette precise


				Les Classes
Il est préferable d'utiliser un StringBuilder plutot que de faire une concaténation de chaine de caractere

constructeur autant qu'on veut avec des param differents
public Personne(String nom, in age)
public Personne()

la methode contains d'une arrayList se comporte par rapport au equals(), s'il n'est pas redéfini, ça risque de prendre en compte des objets identiques

on peut surcharger des methode, cad qui n'ont pas de le meme nb de param, mais 2 param ne doivent pas etre du meme type

int somme (int... v){			//permet d'avoir plusieurs param mais on sait pas cb

AVOIR  List<String> l = new ArrayList<>();
List<String> l1 = Arrays.asList("un", "deux","trois");

static private int nombre; cree une varialbe de classe
public static  int getNombre() 
on appel la methode sur la classe
System.out.println(Personne.getNombre());

close				//destructeur de variable


				Les Classes Internes
Un objet de la classe interne a acces àu private de la class externe


				Les Enumerations
permet d'avoir un certain nombre de constante listé

Civilite politesse;					//class Personne
enum Civilite {
        MADAME, MONSIEUR
    }
p = new Personne(Civilite.MADAME, "Jeanne",800);	//class externe


				GESTION DES EXCEPTIONS
il faut indiquer au compilateur que la methode peut lever une exception
et reporter les exceptions sur tt les methodes
finally permet de se premunir des return (notmment lors de l'instanciation des objets permet de faire un close)

public void setAge(int age) throws Exception {
        if(age<0) {
            //System.out.println("Un age négatif n'existe pas");
           // return;
            throw new Exception("age négatif");  
        }

JEUDI 25			HERITAGE

les constructeurs ne sont pas herités
quand on ecrit le constructeur de la classe fille, on specifie quel constructeur de la classe mere on utilise
le constructeur parent est appelé avant le constructeur fille
 super(nom, age);

de meme dans une methode on appel la methode parente
m1() {
	super.m1()
}


Une variable sans attribut ou protected, elle sera visibile au niveau du package (le protected ne s'effectue pas)

final public class permet d'eviter que la class soit heritée

Quand on n'instancie pas une classe parent, on cree une classe abstraite















