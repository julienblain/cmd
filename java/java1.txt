				JAVA

Github : https://github.com/webformation/formation-j2E
Cours autre formateur : http://www.lsis.org/elmouelhia/teaching.html
mail: dc@webformation.fr


library jstl comme twig

PLAN
base
application locale(sur une poste de travail)
Persistence : Hibernate
J2e : application web (serverlet, jsp)
Creation web service
Framework Spring


Encapsulaiton : objet contient ses proprités et ses méthodes, et les methodes ont comme param les propriété (simplification plutot qu'en procedural car les methodes sont direct dans l'objet cible)

Model de classe (classe abstraites) et modèle de comportement (interface = que des definitions de methodes)

genericité : fabriqué des classes paramétrés dont les param sont des types de donnée

Machine virtuelle : Hyper v et VMWare sont utilisés pour le cloud, VirtualMachine
JVM : contener qui permet l'isolation de l'appel des classes, exé qui sont isolés du systeme d'exploitation, apli...

C'est le bytecode qui s'execute dans la jvm, donc apres compilation. 
Appli Multi-thread : appli qui a plusieurs fil d'execution

INSTALL
mettre le path de java

Maven : gestionnaire de paquet

Prendre java main class la 1ere fois

Texte donnant des info au compilateur
@Deprecated
@Override
@SuppressWarnings

@Deprecated
    static void m1() {

				JAVADOC
/**
* @param args the command line arguments
*/
@return
@throws

alt+entrer import class

une methode static est une methode qu'on peut appeler de l'exterieur sans instancier l'objet.


				TYPE DE VARIABLE PRIMITIVE
int (sur 4 octets)
byte (octet)
char (caractere stocké sur 2 octets)
short
long (8 octets)
float (4octets) 10^-38 a 10^38 precision relative 8 apres la virgule
double de 10^-350 à 10^350	precision relative 12,13 apres la virgule

pas de variable static dans une méthode

Personne.nb 	apple d'une variable de classe
p1.nb		appel d'une variable d'instance


				CLASSE STRING
utiliser StringBuffer/StringBuilder(non syncro) pour modif la string (method append pour add)
Dès qu'on est avec des class le == n'est pas utilisable car les emplacements mémoires ne sont pas les meme (on utilise sur les types primitives = int, float, char et comparaison du même objet ; String est une variable référence)

On utilise equals


ABSENT

Github des projets : https://github.com/webformation/Formation-Java/tree/master/src/main/java/com/formation/mediatheque

ArrayList	contains
Vector
Liste chainé
container avec clef de hachage
collection
System.ArrayCopy
les array pointent normalement vers des address, arrayCopy permet de creer un autre  emplacement


23 JUILLET 2019
				SYNTAXE DE BASE
OPERATEURS
L'associativité peut être de droite à gauche suivant les operateurs

une division de 2 int donnera un resultat int (donc 0), et meme si on affecte le resultat à un flottant

L'Incrementation
b=5
a=b++; 		// valeur de retour post fixé a =5 et b =6;
a = ++b;	// valeur de retour pré fixé a=6 b=6
DAns une boucle il vaut mieux ++i;


				Les Boucles
break permet de quitter la boucle en cours
continue permet d'arreter à un endroit mais passe à l'itération suivante

while (i++<MAX) 	//permet d'incrementer dans while
maBoucle: while...	//une etiquette permet de break une etiquette precise


				Les Classes
Il est préferable d'utiliser un StringBuilder plutot que de faire une concaténation de chaine de caractere
Si on s'atture le stringBuilder le buffer va s'agrandir mais pas forcement automatiquement
(si multi thread utiliser stringBuffer)

constructeur autant qu'on veut avec des param differents
public Personne(String nom, in age)
public Personne()

la methode contains d'une arrayList se comporte par rapport au equals(), s'il n'est pas redéfini, ça risque de prendre en compte des objets identiques

on peut surcharger des methode, cad qui n'ont pas de le meme nb de param, mais 2 param ne doivent pas etre du meme type

int somme (int... v){			//permet d'avoir plusieurs param mais on sait pas cb

AVOIR  List<String> l = new ArrayList<>();
List<String> l1 = Arrays.asList("un", "deux","trois");

static private int nombre; cree une varialbe de classe
public static  int getNombre() 
on appel la methode sur la classe
System.out.println(Personne.getNombre());

close				//destructeur de variable


				Les Classes Internes
Un objet de la classe interne a acces àu private de la class externe


				Les Enumerations
permet d'avoir un certain nombre de constante listé

Civilite politesse;					//class Personne
enum Civilite {
        MADAME, MONSIEUR
    }
p = new Personne(Civilite.MADAME, "Jeanne",800);	//class externe


				GESTION DES EXCEPTIONS
il faut indiquer au compilateur que la methode peut lever une exception
et reporter les exceptions sur tt les methodes
finally permet de se premunir des return (notmment lors de l'instanciation des objets permet de faire un close)

public void setAge(int age) throws Exception {
        if(age<0) {
            //System.out.println("Un age négatif n'existe pas");
           // return;
            throw new Exception("age négatif");  
        }

JEUDI 25			HERITAGE

les constructeurs ne sont pas herités
quand on ecrit le constructeur de la classe fille, on specifie quel constructeur de la classe mere on utilise
le constructeur parent est appelé avant le constructeur fille
 super(nom, age);

de meme dans une methode on appel la methode parente
m1() {
	super.m1()
}


Une variable sans attribut ou protected, elle sera visibile au niveau du package (le protected ne s'effectue pas)

final public class permet d'eviter que la class soit heritée

Quand on n'instancie pas une classe parent, on cree une classe abstraite


VENDREDI26

pour lire un doc
le buffer ne se vide pas avec un nextInt() (la touche entrée reste ne memoire donc
int i = sc.nextInt();
sc.nextLine()	//permet de vider le buffer
txt=sc.nextLine();


29 JUILLET
fonction hashCode()   //permet de creer un hash (un bon candidat pour le hasCode est la clef primaire, car tres discriminate)
tres voisin d'equals


				APACHE TOMCAT
permet de renvoyer des pages jsp, moteur d'application j2e

user/mdp : julblain 11yoan

path java : programme/java/javajdk		//pour reinstaller

http://localhost:8080/

Faire la connection en NetBean et server
Dans l'onglet service, add new server, mettre la location du server là où on l'a installer
Mtn les new projects sont des webappli

une Servlet est une appli java qui tourne dans une vm sur le serveur, dont le but est avant tout une reponse http

JSP java server page, utilisation de javabeans et entrepirse java bean (ejb) qui passe les info d'une page à une autre

PAQUETAGE ET CLASSE
Pour travailler avec une servlet, on a plusieurs classe
	GenericServlet (le protocole pas dit, pas http)
	HttpServlet
	Servlet (qui est une interface : javax.servlet.Servlet)
implemente les methodes necessaires pour répondre aux requetes

Commencer par run le project donne la page


//Outil de debug
ServletContext sc;
sc = config.getServletContext();
sc.log("message truc")  //affiche le log dans service view server log


//En prod on fourni au client
le fichier .war (web archive et sorte de zip) qui se trouve dans le dossier target
Ensuite aller l'importer dans le manager


				Cookie:
on l'utilise pour les preference de l'utilisateur

				Repartition de requete
On peut faire appel a d'autres servlet grace au requestDispatcher, et meme inclure



				JSP
la methode service est la methode generale pour repondre à une servlet, dans une http servlet on a une surcharge de service

On renseigne le fichier entrer/index dans le web.xml dans l'onglet page, renseigner welcomeFile


				Stream
permet de creer un flux de donner sur lequel on pourra faire une recherche plus rapidement

Le servletContext permet de recuperer des variables dans toute l'appli


				JSTL
    <groupId>jstl</groupId>				add to pom.xml
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

				SYNCHRO
il vaut mieux utiliser le single thread pour eviter les pb dans les servlets 


				TESTS - junit

				PHPMYADMIN
Dans ide, service, database, driver, mysql, ajouter les drivers

javaDatabaseConnection
url jdbc jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull&serverTimezone=Europe/Paris
permet de decrire les param de la bdd

ajotuer une dependance pour que la connection se fasse
mysql-connector-java //via la query

Avoir les listener


				GLASSfICH
instaler jdk1.8 (sinon marche pas)
ajouter un server dans service netbeans
run le ser qui va bug
manage plateform
add plateform
ajouter le jdk1.8 qui se trouve dans programme de windows
http://localhost:8080/


				JPA (java persistence api)
Java permanence api
Trouver la persistenc : otherSource/truc/ meta-inf
EntityManager fait la connexion entre la bdd et les entités, qu'on n'apl pas ave un new mais avec une factory createEntityManagerFactory (em = emf.)
on fait des requetes sur les entités pas sur les bdd
permet de passer de sql a nosql par ex...
une Entity est une classe qui est mappée en bdd

Quand une cree une Entity dataBase ça creer le fichier persistence

jpa :
	nouveau projet tourne avec tomcat
	creer une nouvelle entity database
	ajout id s'il y a pas
	ajout dependance mysl-connector-java
	changer dans la persistenceUnit dans le fichier persistence


Quand on map avec des clef etranger (quand on fait eager on va creer les 2 classes liées)
	en lazy (on charge pas l'objet mais c'est quand on en aura besoin)

				LIVRES
Penser en java
Tete la premiere (head first) Eyrolle
site point

				REsumé
ordre traitment:
	page jsp
	couche metier, servlet
	acces bdd 
		par jdbc
		par jpa (qui emploi jdbc mais invisible)

Apir Rest : interrog" par http
webService: accessible par le resau mais qui va pas forcement faire à http (ce qui va proposer des api)
Api soap : qui font appel à autre que http
		
				WebService
http://gsvl:8080/helloREST/webresources/generic

format/norme wadl : fichier xml qui decrit l'api rest (c'est le server d'appli qui le cree, pas tous le font)
Glasfish permet de le creer

On cree un nouveau fichier de catego web service, et de type restfull pattern

pour testet le webservice, clique droit sur le dossier restful
pour passer des param on prend un container item

jpa = orm


				SPRING (2003)
on va travailler avec des contener légers qui vont avoir en charge la gestion de composants (création, initialisation...)
on va ecrire des POJO = Plan old java object, classe java simple
on va faire la config dans xml (param simple, param : autres composants)

IOC =inversion of control
on va indiquer au controler léger cmt travailler par des notation ou xml, qui fait de l'injection de dépendance

grace a des modules de spring, on va pouvoir encapsuler les 


//demoSpringMvc
Dans sourcePackage on fait notre POJO, 
on crée le contexte, le contener dans xml avec les param
et on cree une vue correspondante

le client fait une requete, la requete passe par web.xml grace à l'url(servelet) qui dispatche, et va pouvoir chercher le controller et le xml associé
NE PAS UTILISER LE SPRING DE NETBEANS SURTOUT LE FORM,
On copie colle les dépendance d'un autre controller pour que ca à jour

le fichier pomme contient  <groupId>org.springframework</groupId>

Le service est une interface, et c'est le service qu'on utilisera dans le controller et pas la classe cible, pas la classe qui implémente l'interface
Le service fait le lien entre le controller et l'entity, dans notre controller on pourra appeler des truc sans savoir quels sont les entity

Poour creer un projet spring, on cree une webApp maven avec tomcat
Puis dans webPage on cree un new file standart deployment Descriptor (xml)



				DAO data access object




































